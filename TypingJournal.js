// TypingJournal.js

/**
 * Manages the state of a typing session by maintaining a chronological log of all
 * keystroke events. It acts as the single source of truth for the user's input history,
 * allowing for complex operations like replaying state to determine cursor position
 * or rewinding the log to a specific point in time.
 */
class TypingJournal {
    /**
     * Creates a new TypingJournal instance for a typing session.
     * @param {string} text The original, correct text for the typing test.
     */
    constructor(text) {
        /**
         * The source text the user is attempting to type.
         * @type {string}
         * @public
         */
        this.originalText = text;

        /**
         * An ordered array of keystroke event objects that represents the user's
         * entire input history for the session.
         * @type {Array<object>}
         * @private
         */
        this.keystrokeLog = [];
    }

    /**
     * Appends a new keystroke event object to the end of the log.
     * @param {object} event The structured event object, typically generated by the InputHandler.
     */
    addEvent(event) {
        this.keystrokeLog.push(event);
    }

    /**
     * Truncates the keystroke log to a specific point in time, defined by a target
     * cursor position. This effectively "rewinds" the typing history, which is
     * essential for features like clicking to reposition the cursor. The method
     * replays the log to find the exact event that corresponds to the target
     * cursor position and slices the log at that point.
     *
     * @param {number} newCursorPos The target cursor position to rewind to.
     */
    truncateLog(newCursorPos) {
        let currentPos = 0;
        let sliceIndex = 0;

        // Replay the log to find the exact event that corresponds to the new cursor position
        for (const event of this.keystrokeLog) {
            if (currentPos === newCursorPos) break;
            
            if (event.type === 'correct' || event.type === 'error') {
                currentPos++;
            } else if (event.type === 'backspace') {
                currentPos = Math.max(0, currentPos - 1);
            }
            sliceIndex++;
        }
        
        this.keystrokeLog = this.keystrokeLog.slice(0, sliceIndex);
    }

    /**
     * Returns the complete, current keystroke log.
     * @returns {Array<object>} A copy of the keystroke log array.
     */
    getLog() {
        return this.keystrokeLog;
    }
}